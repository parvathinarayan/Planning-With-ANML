type Location;
type Human with {
    fluent Location position;
};
type Money;

predicate canGetOne(Location l);
predicate canGetFive(Location l);
predicate canGetTen(Location l);
predicate canGetTwenty(Location l);

function Money cash(Human h);
instance Money nil, one, two, three, four,
  five, six, seven, eight, nine, ten, eleven,
  twelve, thirteen, fourteen, fifteen;

action move(Human h, Location current, Location destination){
  [all] h.position == current :-> destination;
};

action getOne(Human h, Location current) {
  duration := 1;
  [start] h.position == current;
  [start] canGetOne(current) == true;
  :decomposition {
    [all] cash(h) == nil :-> one;
  };
  :decomposition {
    [all] cash(h) == one :-> two;
  };
  :decomposition {
    [all] cash(h) == two :-> three;
  };
  :decomposition {
    [all] cash(h) == three :-> four;
  };
  :decomposition {
    [all] cash(h) == four :-> five;
  };
  :decomposition {
    [all] cash(h) == five :-> six;
  };
  :decomposition {
    [all] cash(h) == six :-> seven;
  };
  :decomposition {
    [all] cash(h) == seven :-> eight;
  };
  :decomposition {
    [all] cash(h) == eight :-> nine;
  };
  :decomposition {
    [all] cash(h) == nine :-> ten;
  };
  :decomposition {
    [all] cash(h) == ten :-> eleven;
  };
  :decomposition {
    [all] cash(h) == eleven :-> twelve;
  };
  :decomposition {
    [all] cash(h) == twelve :-> thirteen;
  };
  :decomposition {
    [all] cash(h) == thirteen :-> fourteen;
  };
  :decomposition {
    [all] cash(h) == fourteen :-> fifteen;
  };
};

action getFive(Human h, Location current) {
  duration := 4;
  [start] h.position == current;
  [start] canGetFive(current) == true;
  :decomposition {
    [all] cash(h) == nil :-> five;
  };
  :decomposition {
    [all] cash(h) == five :-> ten;
  };
  :decomposition {
    [all] cash(h) == ten :-> fifteen;
  };
};

action getTen(Human h, Location current) {
  duration := 7;
  [start] h.position == current;
  [start] canGetTen(current) == true;
  :decomposition {
    [all] cash(h) == nil :-> ten;
  };
  :decomposition {
    [all] cash(h) == five :-> fifteen;
  };
};
